syntax = "proto3";

package Binance;

// please note the field name is the JSON name.
message StdTx {
    //    uint64 SIZE-OF-ENCODED // varint encoded length of the structure after encoding
    //    0xF0625DEE   // hardcoded, object type prefix in 4 bytes
    repeated bytes msgs = 1; // array of size 1, containing the transaction message, which are one of the transaction type below
    repeated bytes signatures = 2; // array of size 1, containing the standard signature structure of the transaction sender
    string memo = 3; // a short sentence of remark for the transaction. Please only `Transfer` transaction allows 'memo' input, and other transactions with non-empty `Memo` would be rejected.
    int64 source = 4; // an identifier for tools triggerring this transaction, set to zero if unwilling to disclose.
    bytes data = 5; //byte array, reserved for future use
}

message StdSignature {
    // please note there is no type prefix for StdSignature
    message PubKey {
        //        0xEB5AE987 // hardcoded, object type prefix in 4 bytes
        //        bytes // no name or field id, just encode the bytes
    }
    bytes pub_key = 1; // public key bytes of the signer address
    bytes signature = 2; // signature bytes, please check chain access section for signature generation
    int64 account_number = 3; // another identifier of signer, which can be read from chain by account REST API or RPC
    int64 sequence = 4; // sequence number for the next transaction of the client, which can be read fro chain by account REST API or RPC. please check chain acces section for details.
}

// please note the field name is the JSON name.
// msg
message Send {
    //    0x2A2C87FA   // hardcoded, object type prefix in 4 bytes
    message Token {
        string denom = 1;
        int64 amount = 2;
    }
    message Input {
        bytes address = 1;
        repeated Token coins = 2;
    }
    message Output {
        bytes address = 1;
        repeated Token coins = 2;
    }
    repeated Input inputs = 1;
    repeated Output outputs = 2;
}

message Token {
    string denom = 1;
    int64 amount = 2;
}

message AppAccount {
    //    uint64 SIZE-OF-ENCODED // varint encoded length of the structure after encoding
    //    0x4BDC4C27   // hardcoded, object type prefix in 4 bytes
    message baseAccount {
        bytes address = 1;
        repeated Token coins = 2;
        bytes public_key = 3;
        int64 account_number = 4;
        int64 sequence = 5;
    }
    baseAccount base = 1;
    string name = 2;
    repeated Token frozen = 3;
    repeated Token locked = 4;
}